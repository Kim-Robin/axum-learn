name: rust CI 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          componenets: rustfmt, clippy

      # 3. Cache cargo registry & build artifacts
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      # FORMAT
      - name: Check code formatting
        run: cargo fmt --all -- --check

      # Build 
      - name: Build
        run: cargo build --verbose

      # Test
      - name: Run tests
        run: cargo test --verbose

      # 4. Run Clippy (deny all warnings)
      # LINT
      - name: Lint (clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings

      # 5. Install cargo-audit and Run vulnerability audit
      - name: Install cargo-audit
        run: |
          cargo install cargo-audit --locked
          cargo audit --json > audit-report.json

      - name: Publish audit annotations
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json
          retention-days: 7

      # - name: Install required cargo
      #   run: cargo install clippy-sarif sarif-fmt
      #
      # - name: Run rust-clippy
      #   run: 
      #     cargo clippy
      #     --all-features
      #     --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      #   continue-on-error: true
      #
      # - name: Upload analysis results to Github
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: rust-clippy-results.sarif
      #     wait-for-processing: true
      #
      # - name: Build
      #   run: cargo build --verbose
      # - name: Run tests
      #   run: cargo test --verbose
